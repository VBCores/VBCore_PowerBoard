# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/cyphal-types/voltbro/battery/state.1.0.dsdl
#
# Generated at:  2024-03-29 15:42:03.998443 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     voltbro.battery.state
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.primitive
import uavcan.primitive.scalar
import uavcan.si.unit.electric_charge
import uavcan.si.unit.electric_current
import uavcan.si.unit.voltage

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class state_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 voltage:                 None | uavcan.si.unit.voltage.Scalar_1_0 = None,
                 current:                 None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge:                  None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 capacity:                None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 design_capacity:         None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 power_supply_status:     None | uavcan.primitive.scalar.Integer8_1_0 = None,
                 power_supply_health:     None | uavcan.primitive.scalar.Integer8_1_0 = None,
                 power_supply_technology: None | uavcan.primitive.scalar.Integer8_1_0 = None,
                 is_present:              None | uavcan.primitive.scalar.Integer8_1_0 = None,
                 location:                None | uavcan.primitive.String_1_0 = None,
                 serial_number:           None | uavcan.primitive.String_1_0 = None) -> None:
        """
        voltbro.battery.state.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param voltage:                 uavcan.si.unit.voltage.Scalar.1.0 voltage
        :param current:                 uavcan.si.unit.electric_current.Scalar.1.0 current
        :param charge:                  uavcan.si.unit.electric_charge.Scalar.1.0 charge
        :param capacity:                uavcan.si.unit.electric_charge.Scalar.1.0 capacity
        :param design_capacity:         uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        :param power_supply_status:     uavcan.primitive.scalar.Integer8.1.0 power_supply_status
        :param power_supply_health:     uavcan.primitive.scalar.Integer8.1.0 power_supply_health
        :param power_supply_technology: uavcan.primitive.scalar.Integer8.1.0 power_supply_technology
        :param is_present:              uavcan.primitive.scalar.Integer8.1.0 is_present
        :param location:                uavcan.primitive.String.1.0 location
        :param serial_number:           uavcan.primitive.String.1.0 serial_number
        """
        self._voltage:                 uavcan.si.unit.voltage.Scalar_1_0
        self._current:                 uavcan.si.unit.electric_current.Scalar_1_0
        self._charge:                  uavcan.si.unit.electric_charge.Scalar_1_0
        self._capacity:                uavcan.si.unit.electric_charge.Scalar_1_0
        self._design_capacity:         uavcan.si.unit.electric_charge.Scalar_1_0
        self._power_supply_status:     uavcan.primitive.scalar.Integer8_1_0
        self._power_supply_health:     uavcan.primitive.scalar.Integer8_1_0
        self._power_supply_technology: uavcan.primitive.scalar.Integer8_1_0
        self._is_present:              uavcan.primitive.scalar.Integer8_1_0
        self._location:                uavcan.primitive.String_1_0
        self._serial_number:           uavcan.primitive.String_1_0

        if voltage is None:
            self.voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.voltage = voltage
        else:
            raise ValueError(f'voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(voltage).__name__}')

        if current is None:
            self.current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.current = current
        else:
            raise ValueError(f'current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(current).__name__}')

        if charge is None:
            self.charge = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(charge, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.charge = charge
        else:
            raise ValueError(f'charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(charge).__name__}')

        if capacity is None:
            self.capacity = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(capacity, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.capacity = capacity
        else:
            raise ValueError(f'capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(capacity).__name__}')

        if design_capacity is None:
            self.design_capacity = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(design_capacity, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.design_capacity = design_capacity
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(design_capacity).__name__}')

        if power_supply_status is None:
            self.power_supply_status = uavcan.primitive.scalar.Integer8_1_0()
        elif isinstance(power_supply_status, uavcan.primitive.scalar.Integer8_1_0):
            self.power_supply_status = power_supply_status
        else:
            raise ValueError(f'power_supply_status: expected uavcan.primitive.scalar.Integer8_1_0 '
                             f'got {type(power_supply_status).__name__}')

        if power_supply_health is None:
            self.power_supply_health = uavcan.primitive.scalar.Integer8_1_0()
        elif isinstance(power_supply_health, uavcan.primitive.scalar.Integer8_1_0):
            self.power_supply_health = power_supply_health
        else:
            raise ValueError(f'power_supply_health: expected uavcan.primitive.scalar.Integer8_1_0 '
                             f'got {type(power_supply_health).__name__}')

        if power_supply_technology is None:
            self.power_supply_technology = uavcan.primitive.scalar.Integer8_1_0()
        elif isinstance(power_supply_technology, uavcan.primitive.scalar.Integer8_1_0):
            self.power_supply_technology = power_supply_technology
        else:
            raise ValueError(f'power_supply_technology: expected uavcan.primitive.scalar.Integer8_1_0 '
                             f'got {type(power_supply_technology).__name__}')

        if is_present is None:
            self.is_present = uavcan.primitive.scalar.Integer8_1_0()
        elif isinstance(is_present, uavcan.primitive.scalar.Integer8_1_0):
            self.is_present = is_present
        else:
            raise ValueError(f'is_present: expected uavcan.primitive.scalar.Integer8_1_0 '
                             f'got {type(is_present).__name__}')

        if location is None:
            self.location = uavcan.primitive.String_1_0()
        elif isinstance(location, uavcan.primitive.String_1_0):
            self.location = location
        else:
            raise ValueError(f'location: expected uavcan.primitive.String_1_0 '
                             f'got {type(location).__name__}')

        if serial_number is None:
            self.serial_number = uavcan.primitive.String_1_0()
        elif isinstance(serial_number, uavcan.primitive.String_1_0):
            self.serial_number = serial_number
        else:
            raise ValueError(f'serial_number: expected uavcan.primitive.String_1_0 '
                             f'got {type(serial_number).__name__}')

    @property
    def voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._voltage

    @voltage.setter
    def voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._voltage = x
        else:
            raise ValueError(f'voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    @property
    def current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._current

    @current.setter
    def current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._current = x
        else:
            raise ValueError(f'current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 charge
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge

    @charge.setter
    def charge(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._charge = x
        else:
            raise ValueError(f'charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def capacity(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 capacity
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._capacity

    @capacity.setter
    def capacity(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._capacity = x
        else:
            raise ValueError(f'capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def design_capacity(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._design_capacity

    @design_capacity.setter
    def design_capacity(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._design_capacity = x
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def power_supply_status(self) -> uavcan.primitive.scalar.Integer8_1_0:
        """
        uavcan.primitive.scalar.Integer8.1.0 power_supply_status
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_supply_status

    @power_supply_status.setter
    def power_supply_status(self, x: uavcan.primitive.scalar.Integer8_1_0) -> None:
        if isinstance(x, uavcan.primitive.scalar.Integer8_1_0):
            self._power_supply_status = x
        else:
            raise ValueError(f'power_supply_status: expected uavcan.primitive.scalar.Integer8_1_0 got {type(x).__name__}')

    @property
    def power_supply_health(self) -> uavcan.primitive.scalar.Integer8_1_0:
        """
        uavcan.primitive.scalar.Integer8.1.0 power_supply_health
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_supply_health

    @power_supply_health.setter
    def power_supply_health(self, x: uavcan.primitive.scalar.Integer8_1_0) -> None:
        if isinstance(x, uavcan.primitive.scalar.Integer8_1_0):
            self._power_supply_health = x
        else:
            raise ValueError(f'power_supply_health: expected uavcan.primitive.scalar.Integer8_1_0 got {type(x).__name__}')

    @property
    def power_supply_technology(self) -> uavcan.primitive.scalar.Integer8_1_0:
        """
        uavcan.primitive.scalar.Integer8.1.0 power_supply_technology
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._power_supply_technology

    @power_supply_technology.setter
    def power_supply_technology(self, x: uavcan.primitive.scalar.Integer8_1_0) -> None:
        if isinstance(x, uavcan.primitive.scalar.Integer8_1_0):
            self._power_supply_technology = x
        else:
            raise ValueError(f'power_supply_technology: expected uavcan.primitive.scalar.Integer8_1_0 got {type(x).__name__}')

    @property
    def is_present(self) -> uavcan.primitive.scalar.Integer8_1_0:
        """
        uavcan.primitive.scalar.Integer8.1.0 is_present
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._is_present

    @is_present.setter
    def is_present(self, x: uavcan.primitive.scalar.Integer8_1_0) -> None:
        if isinstance(x, uavcan.primitive.scalar.Integer8_1_0):
            self._is_present = x
        else:
            raise ValueError(f'is_present: expected uavcan.primitive.scalar.Integer8_1_0 got {type(x).__name__}')

    @property
    def location(self) -> uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 location
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._location

    @location.setter
    def location(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._location = x
        else:
            raise ValueError(f'location: expected uavcan.primitive.String_1_0 got {type(x).__name__}')

    @property
    def serial_number(self) -> uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 serial_number
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._serial_number = x
        else:
            raise ValueError(f'serial_number: expected uavcan.primitive.String_1_0 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.capacity._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.design_capacity._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.power_supply_status._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.power_supply_health._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.power_supply_technology._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.is_present._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.location._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.serial_number._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 224 <= (_ser_.current_bit_length - _base_offset_) <= 4320, \
            'Bad serialization of voltbro.battery.state.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> state_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "voltage"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "current"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "charge"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "capacity"
        _des_.pad_to_alignment(8)
        _f3_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "design_capacity"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "power_supply_status"
        _des_.pad_to_alignment(8)
        _f5_ = uavcan.primitive.scalar.Integer8_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f6_ holds the value of "power_supply_health"
        _des_.pad_to_alignment(8)
        _f6_ = uavcan.primitive.scalar.Integer8_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f7_ holds the value of "power_supply_technology"
        _des_.pad_to_alignment(8)
        _f7_ = uavcan.primitive.scalar.Integer8_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f8_ holds the value of "is_present"
        _des_.pad_to_alignment(8)
        _f8_ = uavcan.primitive.scalar.Integer8_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f9_ holds the value of "location"
        _des_.pad_to_alignment(8)
        _f9_ = uavcan.primitive.String_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f10_ holds the value of "serial_number"
        _des_.pad_to_alignment(8)
        _f10_ = uavcan.primitive.String_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = state_1_0(
            voltage=_f0_,
            current=_f1_,
            charge=_f2_,
            capacity=_f3_,
            design_capacity=_f4_,
            power_supply_status=_f5_,
            power_supply_health=_f6_,
            power_supply_technology=_f7_,
            is_present=_f8_,
            location=_f9_,
            serial_number=_f10_)
        _des_.pad_to_alignment(8)
        assert 224 <= (_des_.consumed_bit_length - _base_offset_) <= 4320, \
            'Bad deserialization of voltbro.battery.state.1.0'
        assert isinstance(self, state_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'voltage=%s' % self.voltage,
            'current=%s' % self.current,
            'charge=%s' % self.charge,
            'capacity=%s' % self.capacity,
            'design_capacity=%s' % self.design_capacity,
            'power_supply_status=%s' % self.power_supply_status,
            'power_supply_health=%s' % self.power_supply_health,
            'power_supply_technology=%s' % self.power_supply_technology,
            'is_present=%s' % self.is_present,
            'location=%s' % self.location,
            'serial_number=%s' % self.serial_number,
        ])
        return f'voltbro.battery.state.1.0({_o_0_})'

    _EXTENT_BYTES_ = 540

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8OyLG*0{`t=O>7(25$68W@*fq)wh|}tI&o||u^HNyZ92coPYo55aRe&~gaYYmNv`!)p-5tP=}H9xD2EnuyFj<d7Ep_#(XB#@'
        '209fw6ooDYbZMcWL93psqmBX!6zZ+>xTM4%Nw#InZW9@>xSap@&Aj(^h#8lE_Dnif{pTMqkLBHbA!WFhW19v0`)0OarHou@q+D`s'
        '&kFth?^p$UgdX$nkCm<Pv+&HP;U{6zR}H&Zw49K|{Qdo&Q^|Q1$7&W)jG{S0CJx^!6}+rdN@Y#Yvz)P%>zUki+_+^qu3ai}Bie_x'
        '=g&eAAoj!X)6m~*kb+}pE1u<sACbjP!d;UJedU^M74qvbbQpQlGYyXi#<YmYI{c?A=B=DrOu2TdQnbAkkI)>lQvErzVA7)Yu><ue'
        'Sm#F}J6zN3+AM^!!$GodQ3!jk6-uVp48>j}YkNk)Dh_!p1f9alnXYGyl=2kT3I9l6U7f3?-X<P$7GV+lL3ktdA2$fIV%~J}jfN)3'
        '&WJfg3#jC|<C~6|^9Vziu)S7$CL8|gi{0r9nF|-YFJHcxxpX0uxpXyi{`{46_xa4l?o9Wk^Ovt)xYXU94!N&Nmhh1|AfYcC`BE<Q'
        'V?;FlLk-z5vSU$lKM7ekJMPi~^H$lha+KJ7c-uc<+_XonyiqPWo?++1>wc%<mMTupB1XY7$|i;HYy6{NXDRePD!0)-PW_DF5?&(T'
        'ti+2)EZd>KFE>_ZX5k!9BQ5S&xsol|Im5ArDh2LwJ;}sXqui3JOR6%@FS)8^IP?!jIZmBVrBghUp~nF}WH8gEupF!C@zmb3b5?kp'
        'U1FCBglvJ#o~kE)Jpm->wSK2y-?F`TtKa+SYpn!)$taaWU*F7#J2sLn(V8d{v_?u)Ry=v{l`Y5gN>1ap%Q2e@ob~$$`^<daE)KN`'
        'u>sD#UMbKr$6C2$;g(sbSm95?B<O*grEOS_422M{WNEo0c9GX8J(#2XLF08wKy&R5!x}A{#p+JIUdg)IYPqbT%K;<G+IDH!a;I9h'
        'oK>)LR8Bb~S8+J%ciwyKx!Thy(AjDBB0D?5&aw11%3C!@2$p)dCc8pqJjNWCUA@g-zRq4@uP50XtcShH-ePaFci6YsH9yfBaL9Uj'
        '=`g643452lR}GKdU>~gI;X7+j-;J1N9d?%EXtO*m#iIW=iN_iMUGuRypwDj#C^MbAIm;d#o?5O{DU?RCO@L0apKb~0!Ipq`5>K`6'
        'q7}{`6EmJO%Vy5@#x`aj%v-KKR5Ui1TF;4I%gNexkaDBb=G#Tj8nT?sR_Qq5clMJbD_;|Cx<V*P@mi9qD^j9e+z9v|*zY$3+~3o1'
        'L8(zpq2F1Ls`)V7Mh4=I8HiH`;;k7tR4#qbatyapE*Hl5ZRS<nb|h!oB$;Iv=vLTJ@@SK!XXRM2R45INZ7khk(*f^T?j5$((Y6%Q'
        '>kU60w|FTyw#j>m<CtTifAm9>s6>fwg*Q31`SoDGL3?3@Up>)_$_f9_2SxYpYQf*LUYQsZ{Kx9|%1!<zR5Q4|rkEhbGa&G-8<o<A'
        'S?>1_zg;Tw+q}5pMZ}%*dx*{`{$kct3khBeji!#?FpERh4XbQ<_GY)*$JNV*;@_aKsznuJ7RIVol>~uvVgZP?PpSGzxe)`9Ycyqz'
        '1`@~tsL^+kKWj}qP(TeJUenvt#siI_fQ~hNqR{uf8_K~R=m=n6#EWxZ`!|(?y|6EU15I{`O0<Jp>cD<D5I~~lBY@63O2a`)3Ov^4'
        'i8w?*bXWS&36BNvcqA(me;?O9eAl{g2p$jM$c8Zxmv~3-$rc=jBLQ^Pk)~LlxMzJh3S9v_xoJ!!LHuLevI|eZlL0){gcoti-qYK*'
        '2gl&40G`=0UXmi2<M-tQo`z=v(ATi#QJ=VPi*TGSYIruXqi+>I_x{`i@dqd1*#J(~eKzEQqxAd(^8wGn$pB8>F*Bs0lQhYmexSbL'
        'c{mk7vcAq*&dxk=A8;Cy0laY6>m&`5e{o0RfHUwy0B6^8dy;G>8}oZ^$Na*Ja5jL{J>fuFr1R2_#sude6+n8u4w6wNoZoS;@Dij0'
        'xNy&ikS6I}d?@k3dAJZjcYDR0CEMwG)m(aLvA{*>4&d^(Fe7c!z4B0Fg-dWbfJ}3BrFnf_eduw(703ke^0u)f3#9+bBZ(WX!pi}?'
        'x_KRTlaCCq#n&ELeDDgq8o=xKg)dnl8*e<)HNb1|dH_9bHA~sAFjggFOvIRsF_jt&h+|yDxQwd`##KmQLd1lO2^G4qOT;c2yHs4&'
        'Ku29fT}EAnBql{n%9vCkjcF0nGNx6?U`E7@j2RVrut&rm8GBUd#a<D6W$aa<5Bo&yld(^Q0UQu<K*j+T260ftK^X^CV8}#dGBOp)'
        'SQfD?V_Ah!92Id?#!(f<aa_c48OK$azzGp2WSmeTz(B-6#z2KhoD^|V#z_^Xa7x4}8K+d3#%U3!Wt>)F24_T^k#R<aS)3JdR>oNs'
        '=5S8LIT`0vn8$e$=VhE%VF4FJT##`=g+*KxaZ$!a6_#*G#3dP*R9MDk5tn6LR$&EKL|l<^MTJ#d6>*jDBy<IgNf=WwreR#bxP);6'
        'S;K^Y2?-MlCN%64uuH-&1-mrV1=J<f71T9M3Ye5IsbEsWw18;|(+Z|F%m|o~Fr#2b!yW;9B<xYJN5ftLdnN2uuvf!A0sAEEQ?O6N'
        '0Raaj98hpT!$AQDB^*?6P(vmllaMLMG%O2Pmawc~S;J8QM<pCpa8$!_0mmgAS8!az2>~Z0oKSE=!$815!a%`5!$|=rC7e`nQo|_$'
        'rzD(Ga7x2z0jDLLR&ZLw83AV`oKbK_!&w1mC7e}oR>L^~=Omm{a8AQ{0p}&0S8!g#1pyZ%Tu^X9!$koXC0vzoQNcwGmjqmra7n=>'
        '4VML6mT+0YWeryZT#;}^!4(Zxg`kqPT;4<{sEJPeKQ+;D-aPF#(GQ`CPDD8DHqkrKMAIvHgzf`vqV+pn%sbFT>&<!i+BVVp`VSx9'
        'm?oO9`6O9RHs|*n-9&RtlJ!d1ZK7M6=;n&qZKChBiH=U0B=HivP4s;<(b286+eAN%CVKruY;2+%TWIQ=F&?k?&|<BJR;lseoiuNv'
        'tIf3hDBEaipQ(@L&9uC68_nD2S|`2RMt@z~=%|OLX8Nw%=-Mzt`|!oEFT`T(pPLT6{Lw!cjS*}xYT^IrP5p!SuVv0z#at<G<#o3z'
        'sh4i*o;B*FI{NKm&eA<*)j77SJ63I$f#gkBH}(8j(HyaJdUfc4>t@G1%RQ^x9v3f`JiS;c6wY~;Gh!F{&|FG?*Z$bj`%FF#QnQ>2'
        '?=<!CueC9c^&b-&=RD$tQm#5O&^}}F4`T0+CM1kvWhBd|N2@XxM=;53c7#o^VfJfwoBf7Ov){4bvOlvg*aG_t`z!mB{f&J!{BsWT'
        '--mxmAH%<(Ka~vtkH*omPAT-Y+Q@0>AE*wUZfnqGo%ZiY>_2?uVOR2hN%F%@=D*l@^vhQdQG3>@b>SBB=aKLrQ3u<FTgWxxaiWg5'
        '3%8JK!c#<@Y8P%H|0xolChBy%a0|I6JVVr(cHtIsO?Z~5v+cqy<eKmtQRmu)o5{l=ZN^A`fzE}6c)LOiy+LD%I7^9kjTU-z!mzz;'
        'A4~87tR$Tm!*o_m(>d`4oe^KMujpvtr@{k1P=<fSxu5etQ}n0d=<qdzPG~++MuGZAjC^fa-r;j=dHQG_zv6?ID_aa+HP(6Ch~t{r'
        'us~r%UxsCR#HYlq=B6SH>%Y#rRWKvubv{+q+0Nz4ss93CIBTpaFaQ7'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
